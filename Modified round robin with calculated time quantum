#include<stdio.h>

int main()
{
      int i, limit, total = 0, x, counter = 0, time_quantum,j,highest=0,mid,median,a;

      int wait_time = 0, turnaround_time = 0, arrival_time[20], burst_time[20], temp[20],med[20];

      float average_wait_time, average_turnaround_time;
      printf("\nEnter Total Number of Processes:\t");
      scanf("%d", &limit);
      x = limit;

      for(i = 0; i < limit; i++)
      {
            printf("\nEnter Details of Process[%d]\n", i + 1);
            printf("Arrival Time:\t");
            scanf("%d", &arrival_time[i]);
            printf("Burst Time:\t");
            scanf("%d", &burst_time[i]);
            temp[i] = burst_time[i];
      }
      printf("\nEnter Time Quantum:\t");
      scanf("%d", &time_quantum);
      printf("\nProcess ID\t\tBurst Time\t Turnaround Time\t Waiting Time\n");

      for(total = 0, i = 0; x != 0;)
      {
            if(temp[i] <= time_quantum && temp[i] > 0)
            {
                  total = total + temp[i];
                  temp[i] = 0;
                  counter = 1;
            }
            else if(temp[i] > 0)
            {
                  temp[i] = temp[i] - time_quantum;
                  total = total + time_quantum;
            }
            if(temp[i] == 0 && counter == 1)
            {
                  x--;
                  printf("\nProcess[%d]\t\t%d\t\t %d\t\t\t %d", i + 1, burst_time[i], total - arrival_time[i], total - arrival_time[i] - burst_time[i]);
                  wait_time = wait_time + total - arrival_time[i] - burst_time[i];
                  turnaround_time = turnaround_time + total - arrival_time[i];
                  counter = 0;
            }
            if(i == limit - 1)
            {
                  i = 0;
                  for(j=0;j<limit;j++)
                  {
                      if(highest<temp[j])
                      {
                        highest=temp[j];
                      }
                  }
                  for(j=0;j<limit;j++)
                    med[j]=temp[j];
                for (k = 0; i < limit; ++i)
                {

                  for (j = k + 1; j < limit; ++j)
                  {

                    if (med[k] > med[j])
                    {

                      a =  med[k];
                      med[k] = med[j];
                      med[j] = a;
                    }
                  }

                }

                  if(limit%2==0)
                  {

                    mid=limit/2;
                    median=med[mid];
                    mid++;
                    median=(median+med[mid])/2;
                  }
                  else
                  {
                    mid=limit/2;
                    median=med[mid];
                  }
                  time_quantum=(highest + median)/2;
            }
            else if(arrival_time[i + 1] <= total)
            {
                  i++;
            }
            else
            {
                  i = 0;
            }
      }
      average_wait_time = wait_time * 1.0 / limit;
      average_turnaround_time = turnaround_time * 1.0 / limit;
      printf("\n\nAverage Waiting Time:\t%f", average_wait_time);
      printf("\nAvg Turnaround Time:\t%f\n", average_turnaround_time);
      return 0;
}
